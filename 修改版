tic;  % Start timing
[opt_policy, min_population]=optimize_policy();
elapsedTime = toc;  % End timing and store the elapsed time in elapsedTime

fprintf('Elapsed time: %.3f seconds\n', elapsedTime);

function [optimal_policy, minimal_population] = optimize_policy()
    % Define optimization options
    options = optimoptions('ga');


%暂时先设成这样，麻烦你们填入真实的数据
num_county=14;
years=5;

    
    % Define genetic algorithm parameters
    nvars = num_county * 2 * years; % number of decision variables
    lb = zeros(1, nvars); % lower bounds
    ub = ones(1, nvars); % upper bounds
    intcon = 1:nvars; % integer constraints

    % Run genetic algorithm
    %这样可以跑，但是是小数
    [x, fval] = ga(@objective_function, nvars, [], [], [], [], lb, ub, @constraint_function, options);
    %理论上应该是这样的
    %[x, fval] = ga(@objective_function, nvars, [], [], [], [], lb, ub, @constraint_function,intcon, options);

    % Reshape solution into policy format
    optimal_policy = reshape(x, [num_county, 2, years]);
    minimal_population = fval;
end
function total = objective_function(x)
    num_county=14;%暂时先设成这样，麻烦你们填入真实的数据
    years=5;
    % Reshape x into policy format
    policy = reshape(x, [num_county, 2, years]);
    %暂时先设成这样，麻烦你们填入真实的数据
initial_population=zeros(num_county,3);
initial_pop=[0 0 0 0 0 0 0 0 0 0 0 0 0 0;
0 0 0 0 0 0 0 0 0 0 0 0 0 0;
0 20 0 0 0 10 70 0 40 60 110 920 45020 1060];
initial_population=initial_pop';%initial population of each county, 1st column is eggs, 2nd is Nymphs and 3rd is Adults

traffic_matrix1=diag([0.5 0.5 0.5 0.5 0.2 0.5 0.5 0.2 0.2 0.5 0.2 0.5 0.8 0.5]);
traffic_matrix2=zeros(14,14);
traffic_matrix2(:,1)=0.0883;
traffic_matrix2(:,2)=0.0883;
traffic_matrix2(:,3)=0.0883;
traffic_matrix2(:,4)=0.0883;
traffic_matrix2(:,5)=0.0417;
traffic_matrix2(:,6)=0.0883;
traffic_matrix2(:,7)=0.0883;
traffic_matrix2(:,8)=0.0417;
traffic_matrix2(:,9)=0.0417;
traffic_matrix2(:,10)=0.0883;
traffic_matrix2(:,11)=0.0417;
traffic_matrix2(:,12)=0.0883;
traffic_matrix2(:,13)=0.1250;
traffic_matrix2(:,14)=0.0417;
traffic_matrix=traffic_matrix1*traffic_matrix2; 
traffic_matrix(1,1)=1-sum(traffic_matrix(1,2:14));
traffic_matrix(2,2)=1-sum(traffic_matrix(2,3:14))-sum(traffic_matrix(2,1));
traffic_matrix(3,3)=1-sum(traffic_matrix(3,4:14))-sum(traffic_matrix(3,1:2));
traffic_matrix(4,4)=1-sum(traffic_matrix(4,5:14))-sum(traffic_matrix(4,1:3));
traffic_matrix(5,5)=1-sum(traffic_matrix(5,6:14))-sum(traffic_matrix(5,1:4));
traffic_matrix(6,6)=1-sum(traffic_matrix(6,7:14))-sum(traffic_matrix(6,1:5));
traffic_matrix(7,7)=1-sum(traffic_matrix(7,8:14))-sum(traffic_matrix(7,1:6));
traffic_matrix(8,8)=1-sum(traffic_matrix(8,9:14))-sum(traffic_matrix(8,1:7));
traffic_matrix(9,9)=1-sum(traffic_matrix(9,10:14))-sum(traffic_matrix(9,1:8));
traffic_matrix(10,10)=1-sum(traffic_matrix(10,11:14))-sum(traffic_matrix(10,1:9));
traffic_matrix(11,11)=1-sum(traffic_matrix(11,12:14))-sum(traffic_matrix(11,1:10));
traffic_matrix(12,12)=1-sum(traffic_matrix(12,13:14))-sum(traffic_matrix(12,1:11));
traffic_matrix(13,13)=1-sum(traffic_matrix(13,14:14))-sum(traffic_matrix(13,1:12));
traffic_matrix(14,14)=1-sum(traffic_matrix(14,1:13));

%traffic_matrix(i,j)表示从i到j的流量,(i,i)表示留在i的量，一行和为1

food_condition=[2;2;2;2;2;1;2;1;1;1;3;2;3;3]; %food condition based on tree of heaven, 1 means normal, >1 means better
tree_trap_effectiveness=0.2; %trap effectiveness
inspection_effectiveness=0.2; %inspection effectiveness

%other parameters
% these are survival rate of different stages and reproduction rate
Sen=0.62*0.74;
San=0.25;
F=47.73;

% population matrix
% one row is one county and one page is one year
population=zeros(num_county, 3 ,years+1);
population(:,:,1)=initial_population;
    % Run simulation
    final_population = simulation_total(num_county,traffic_matrix,...
    food_condition,tree_trap_effectiveness,inspection_effectiveness,...
    Sen,San,F,policy,years,population);

    % Objective is to minimize population
    total = final_population; % Negative for minimization
end

function [c, ceq] = constraint_function(x)
    C_inspection=1; %cost for action
    C_tree_trap=1;
    num_county=14;
    years=5;
    % Reshape x into policy format
    policy = reshape(x, [num_county, 2, years]);
    total_reource_per_year=5;

    % Inequality constraints (none in this case)
    c = [];

    % Equality constraints )
    ceq =[ total_reource_per_year-(sum(policy(:,1,1))*C_inspection+sum(policy(:,2,1))*C_tree_trap);
        total_reource_per_year-(sum(policy(:,1,2))*C_inspection+sum(policy(:,2,2))*C_tree_trap);
        total_reource_per_year-(sum(policy(:,1,3))*C_inspection+sum(policy(:,2,3))*C_tree_trap);
        total_reource_per_year-(sum(policy(:,1,4))*C_inspection+sum(policy(:,2,4))*C_tree_trap);
        total_reource_per_year-(sum(policy(:,1,5))*C_inspection+sum(policy(:,2,5))*C_tree_trap)];
end
